package com.project.space.journalApp.service.impl;

import com.project.space.journalApp.dto.UserDTO;
import com.project.space.journalApp.entity.UserEntity;
import com.project.space.journalApp.repository.UserRepository;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class UserDTOEntityServiceImplTest {
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private UserServiceImpl userService;
    private UserEntity savedUserEntity;
    private UserDTO testUserDTO;

    @BeforeEach
    void setUp() {
        // Setup UserDTO for saving
        testUserDTO = new UserDTO();
        testUserDTO.setUsername("TestUser1");
        testUserDTO.setPassword("TestUser1Pass"); // Should be a raw password here

        // Simulate the entity that would be returned after saving
        savedUserEntity = new UserEntity();
        savedUserEntity.setId(new ObjectId()); // Simulate ID generated by DB
        savedUserEntity.setUsername("TestUser1");
        savedUserEntity.setPassword("encodedTestUser1Pass"); // Assuming password gets encoded
        savedUserEntity.setRoles(Collections.singletonList("USER")); // Default role for new users
        savedUserEntity.setJournalEntries(new ArrayList<>()); // Initialize to avoid NPE
    }


    @Test
    void saveEntry() { // Your testSaveUser method, probably
        // Mock the behavior of userRepository.save()
        // When userRepository.save() is called with *any* UserEntity, return our predefined savedUserEntity
        Mockito.when(userRepository.save(Mockito.any(UserEntity.class))).thenReturn(savedUserEntity);

        // Call the service method
        UserDTO resultEntity = userService.saveNewUser(testUserDTO); // Or saveUser, depends on your method name

        // Assertions
        assertNotNull(resultEntity, "UserEntity should not be null");
        assertEquals(savedUserEntity.getUsername(), resultEntity.getUsername());
        // Add more assertions as needed
        Mockito.verify(userRepository, Mockito.times(1)).save(Mockito.any(UserEntity.class));
    }

    // Example for testFindByUserName
    @Test
    void testFindByUserName() {
        // Mock data for findByUserName
        UserEntity foundUserEntity = new UserEntity();
        foundUserEntity.setUsername("existingUser");
        foundUserEntity.setPassword("somePass");
        foundUserEntity.setRoles(Collections.singletonList("USER"));
        foundUserEntity.setJournalEntries(new ArrayList<>()); // Crucial: Initialize this list

        Mockito.when(userRepository.findByUsername("existingUser")).thenReturn(foundUserEntity);

        assertNotNull(foundUserEntity);
        assertEquals("existingUser", foundUserEntity.getUsername());
        assertNotNull(foundUserEntity.getJournalEntries()); // Assert it's not null
    }

    // Example for testCrudAdminUser
    @Test
    void testCrudAdminUser() {
        UserDTO adminUserDTO = new UserDTO();
        adminUserDTO.setUsername("adminUser");
        adminUserDTO.setPassword("adminPass");
        adminUserDTO.setJournalEntries(new ArrayList<>()); // Initialize DTO's entries if it has them

        UserEntity savedAdminEntity = new UserEntity();
        savedAdminEntity.setId(new ObjectId());
        savedAdminEntity.setUsername("adminUser");
        savedAdminEntity.setPassword("encodedAdminPass");
        savedAdminEntity.setRoles(List.of("ADMIN", "USER")); // Should match service logic
        savedAdminEntity.setJournalEntries(new ArrayList<>()); // Crucial: Initialize this list

        Mockito.when(userRepository.save(Mockito.any(UserEntity.class))).thenReturn(savedAdminEntity);

        UserDTO result = userService.saveAdminUser(adminUserDTO); // Call saveAdminUser
        assertNotNull(result);
        assertEquals("adminUser", result.getUsername());
        assertTrue(result.getRoles().contains("ADMIN"));
        assertNotNull(result.getJournalEntries()); // Assert it's not null
    }

}